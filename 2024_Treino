import MetaTrader5 as mt5
import pandas as pd
from keras.models import Sequential
from keras.layers import Dense, Conv1D, LSTM, BatchNormalization, Dropout, Flatten
from keras.regularizers import l2
from sklearn.preprocessing import MinMaxScaler
import datetime

# Conecte-se ao MetaTrader 5
if not mt5.initialize():
    print("initialize() failed, error code =", mt5.last_error())
    quit()

# Solicite dados do Papel WIN$
rates = mt5.copy_rates_from_pos("WIN$", mt5.TIMEFRAME_M5, 0, 99999)

# Crie um DataFrame do pandas
df = pd.DataFrame(rates)
df.sort_values('time', inplace=True, ascending=False)

# Adicionar novas features
df['moving_avg'] = df['close'].rolling(window=10).mean()
df['volatility'] = df['close'].rolling(window=10).std()
df.dropna(inplace=True)  # Remova linhas com NaN geradas por rolling

# Salve o DataFrame em um arquivo CSV
df.to_csv('Treinamento_win1.csv', index=False)

# Crie o modelo de rede neural
model = Sequential()
model.add(Conv1D(32, 2, activation="relu", input_shape=(df.shape[1]-1, 1), kernel_regularizer=l2(0.01)))
model.add(BatchNormalization())
model.add(Dropout(0.5))
model.add(Conv1D(64, 2, activation="relu", kernel_regularizer=l2(0.01)))
model.add(BatchNormalization())
model.add(Dropout(0.5))
model.add(LSTM(50, return_sequences=True))
model.add(LSTM(50))
model.add(Dense(50, activation='relu'))
model.add(Dense(1))
model.compile(loss='mean_squared_error', optimizer='adam')

# Preprocessamento dos dados
X = df.drop('close', axis=1).values
y = df['close'].values

scaler_X = MinMaxScaler(feature_range=(0, 1))
scaler_y = MinMaxScaler(feature_range=(0, 1))
X = scaler_X.fit_transform(X)
y = scaler_y.fit_transform(y.reshape(-1, 1))
X = X.reshape(X.shape[0], X.shape[1], 1)

# Treine o modelo com os dados do WIN$
model.fit(X, y, epochs=100, batch_size=10)

# Salve o modelo treinado
model.save('Treinamento_win1.h5')

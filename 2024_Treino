import MetaTrader5 as mt5
import pandas as pd
from keras.models import Sequential
from keras.layers import Dense, Conv1D, Flatten
from keras.models import load_model
from keras.layers import Dropout, BatchNormalization
from keras.regularizers import l2
from sklearn.preprocessing import MinMaxScaler
import datetime

# Conecte-se ao MetaTrader 5
if not mt5.initialize():
    print("initialize() failed, error code =", mt5.last_error())
    quit()

# Solicite dados do Papel WIN$
rates = mt5.copy_rates_from_pos("WIN$", mt5.TIMEFRAME_M5, 0, 99999)

# Crie um DataFrame do pandas
df = pd.DataFrame(rates)
df.sort_values('time', inplace=True, ascending=False)

# Salve o DataFrame em um arquivo CSV
df.to_csv('Treinamento_win.csv', index=False)

# Crie o modelo de rede neural
model = Sequential()
model.add(Conv1D(32, 2, activation="relu", input_shape=(df.shape[1]-1, 1), kernel_regularizer=l2(0.01)))  # Ajuste aqui
model.add(BatchNormalization())
model.add(Dropout(0.5))
model.add(Conv1D(64, 2, activation="relu", kernel_regularizer=l2(0.01)))
model.add(BatchNormalization())
model.add(Dropout(0.5))
model.add(Flatten())
model.add(Dense(50, activation='relu'))
model.add(Dense(1))
model.compile(loss='mean_squared_error', optimizer='adam')

# Treine o modelo com os dados do WIN$
X = df.drop('close', axis=1).values
y = df['close'].values
scaler_X = MinMaxScaler(feature_range=(0, 1))
scaler_y = MinMaxScaler(feature_range=(min(y), max(y)))  # Novo scaler para y
X = scaler_X.fit_transform(X)
y = scaler_y.fit_transform(y.reshape(-1,1))  # Ajuste o scaler_y aos dados y
X = X.reshape(X.shape[0], X.shape[1], 1)
model.fit(X, y, epochs=100, batch_size=10)

# Salve o modelo treinado
model.save('Treinamento_win.h5')

import MetaTrader5 as mt5
import pandas as pd
from keras.models import load_model
from sklearn.preprocessing import MinMaxScaler
import numpy as np
import tkinter as tk
import time
from datetime import datetime, timedelta
import pytz

# Conecte-se ao MetaTrader 5
if not mt5.initialize():
    print("initialize() failed, error code =", mt5.last_error())
    quit()

# Carregue o modelo treinado
model = load_model('Treinamento_win1.h5')

# Crie uma janela com os valores atuais e as previsões ajustadas
root = tk.Tk()
root.title("Valores Atuais vs Previsões Ajustadas")

label1 = tk.Label(root, text="")
label1.pack()

label2 = tk.Label(root, text="")
label2.pack()

label3 = tk.Label(root, text="")
label3.pack()

label4 = tk.Label(root, text="")
label4.pack()

# Defina o fuso horário para UTC-3
tz = pytz.timezone('America/Sao_Paulo')

# Crie um DataFrame para armazenar as previsões
df_predictions = pd.DataFrame(columns=['timestamp', 'current_value', 'predicted_value'])

def update_data():
    # Solicite dados do Papel WIN$
    rates_m24 = mt5.copy_rates_from_pos("WIN$", mt5.TIMEFRAME_M1, 0, 50000)

    # Crie um DataFrame do pandas
    df_m24 = pd.DataFrame(rates_m24)
    df_m24.sort_values('time', inplace=True, ascending=False)

    # Preprocessamento dos dados
    df_m24['moving_avg'] = df_m24['close'].rolling(window=10).mean()
    df_m24['volatility'] = df_m24['close'].rolling(window=10).std()
    df_m24.dropna(inplace=True)

    X_m24 = df_m24.drop('close', axis=1).values
    scaler_X = MinMaxScaler(feature_range=(0, 1))
    X_m24 = scaler_X.fit_transform(X_m24)
    X_m24 = X_m24.reshape(X_m24.shape[0], X_m24.shape[1], 1)

    y = df_m24['close'].values
    scaler_y = MinMaxScaler(feature_range=(0, 1))
    scaler_y.fit(y.reshape(-1, 1))

    # Faça a previsão para os próximos 10 minutos
    predictions = model.predict(X_m24[:10])
    predictions = scaler_y.inverse_transform(predictions)

    # Ajuste as previsões com base no fator de ajuste dinâmico
    current_value = df_m24['close'].values[0]
    predicted_value = predictions[0][0]
    adjustment_factor = current_value / predicted_value if np.abs(current_value - predicted_value) > 0.01 else 1.0
    adjusted_predictions = predictions * adjustment_factor

    # Arredonde os valores para inteiros
    current_values_int = np.round(df_m24['close'].values[:10])
    adjusted_predictions_int = np.round(adjusted_predictions)

    # Atualize os rótulos com os valores atuais e as previsões ajustadas
    current_time = (datetime.fromtimestamp(df_m24['time'].values[0], tz=pytz.UTC)+ timedelta(hours=3)).astimezone(tz).strftime('%H:%M')
    predicted_time = (datetime.fromtimestamp(df_m24['time'].values[0], tz=pytz.UTC) + timedelta(hours=3,minutes=20)).astimezone(tz).strftime('%H:%M')
    label1.config(text="Horário atual: " + current_time)
    label2.config(text="Valor atual: " + str(current_values_int[0]))
    label3.config(text="Horário da previsão: " + predicted_time)
    label4.config(text="Previsão ajustada: " + str(adjusted_predictions_int[9]))

    # Adicione a previsão atual ao DataFrame
    df_predictions.loc[len(df_predictions)] = [current_time, current_values_int[0], adjusted_predictions_int[9]]

    # Salve o DataFrame em um arquivo CSV
    df_predictions.to_csv('predictions1.csv', index=False)

    root.after(10000, update_data)  # Atualize os dados a cada 10 segundos

root.after(10000, update_data)
root.mainloop()
